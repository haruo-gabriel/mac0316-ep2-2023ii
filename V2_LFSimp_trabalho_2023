lingSimples - trabalho 2023 - versão 2

Nesta versão da linguagem, várias formações de expressões são admitidas no parser, mas não podem ser computadas (avaliadas) porque infringem os tipos. O 'if' agora tem uma condição que é um valor booleano ou o uma expressão relacional.

Software disponível (acessado em out/2023) para escrever/reconhecer a sintaxe de linguagens
 
 https://bnfplayground.pauliankline.com/

/* gramática utilizada no trabalho 2 - 2023 */
/* a gramática abaixo pode ser submetida ao software sugerido para que vocês possam entender quais expressões são aceitas na linguagem */

<character>     ::= <letter> | <digit> | <symbol>
<letter>        ::= [a-z] | [A-Z] 
<digit>         ::= [0-9]
<intnum>        ::= <digit>+
<number>        ::= <intnum> | <intnum> "." <intnum>
<bool>          ::= "true" | "false"
<other_symb>    ::=  "_" | "!" | "?" | "#" 
<reserv_symb>   ::=   "(" | ")" | "+" | "-" | "*" | "~" | "%" |
                      "<" | ">" | "<=" | ">=" | "==" | "!=" 
<symbol>        ::=  <reserv_symb> | <other_symb>
<reserv_word>   ::=  "cons" | "head" | "tail" | 
                     "if" | "let" | "letrec" | 
                     "lambda" | "call" |
                     <bool>
                      
<reservedW>      ::=  <reserv_symb> | <reserv_word>

/* id a ser modificado - começa com letra, seguida de letras e dígitos e (não é uma palavra reservada) */
/* já realizado no primeiro trabalho */

<id>             ::=  (<character>)+

/* -- Operadores Relacionais -- */
<eq_op>  ::= " == " | " != "
<cmp_op> ::= " > " | " >= " | " < " | " <= "  
<op_rel> ::= <eq_op> | <cmp_op>

/* -- Expressões Relacionais -- */
<rel_expr> ::= "(" <op_rel>  <arith_expr> " " <arith_expr> ")" 


/* -- Operadores Aritméticos -- */
<op_arith_bin> ::= " + " | " - " | " * " | " % " 
<op_arith_un>  ::= " ~ "

/* -- Expressões Aritméticas -- */
<arith_expr> ::= "(" <exprA_bin> ")" | "(" <exprA_un> ")" | <number>
<exprA_bin>  ::= <op_arith_bin> <code> " " <code>
<exprA_un>   ::= <op_arith_un> <code> 


/* -- Operadores Listas -- */
<op_list>      ::= "head " | "tail "

/* -- Expressões sobre listas -- */
<list_expr>  ::= <cons> | "(" <exprL>  ")"
<cons>       ::= "(cons " <code> " " <code> ")"
<exprL>      ::= <op_list>  <code> 


/* -- Expressões Lambda (definição e aplicação de funções) -- */
<lamb_expr> ::=  <lambda> | <call> 
<lambda>    ::= "(lambda " <param> " "  <code> ")"
<param>     ::= <id>
<call>      ::= "(call " <lambda> " " <code> ")"

/* -- expressões if -- */
<if>    ::= "(if " <cond>  " " <pos>  " " <neg> ")"
<cond>  ::= <rel_expr> | <bool>
<pos>   ::= <code>
<neg>   ::= <code>

/* -- expressões let  -- */         
<let_expr>  ::=  <let> | <letrec> 
<let>       ::= "(let " <id> " "  <def>  " " <body> ")"
<letrec>    ::= "(letrec " <id> " "  <lambda>  " " <body> ")"
<def>       ::= <code>
<body>      ::= <code>


/* -- Código do programa -- */
<code>  ::=  <expr> | <number>

<expr>  ::=  <arith_expr> | <list_expr> | <lamb_expr> | <if> | <let_expr> 




